<Chapter Label="Tutorial">
<Heading>Tutorial</Heading>

This chapter is a collection of tutorials that show how to work with wreath products in
&GAP; in conjunction with the package &WPE;.

<Section Label="Tutorial Create Wreath Product Elements">
<Heading>Create Wreath Product Elements</Heading>

In this section we present an example session which demonstrates
how we can create wreath products elements by specifying its components. <P/>

In the following we will work with the wreath product <M>G = \textrm{Alt}(5) \wr \textrm{Sym}(4)</M>. <P/>
<Example><![CDATA[
gap> LoadPackage("WPE");;
gap> K := AlternatingGroup(5);;
gap> H := SymmetricGroup(4);;
gap> G := WreathProduct(K, H);
<permutation group of size 311040000 with 10 generators>
]]></Example>

The method <C>WreathProductElementList</C> is the preferred way to create
a wreath product element by specifying its components. <P/>
<Example><![CDATA[
gap> gList := [ (1,5,2,4,3), (1,3,5,2,4), (1,5,3,4,2), (1,4,5), (1,3)(2,4) ];;
gap> g := WreathProductElementList(G, gList);
(1,15,3,11,5,12)(2,14)(4,13)(6,18,8,20)(7,19,10,17)(9,16)
gap> g in G;
true
]]></Example>

On the other hand, the method <C>ListWreathProductElement</C> can be used
to get a list containing the components of a wreath product element. <P/>
<Example><![CDATA[
gap> ListWreathProductElement(G, g);
[ (1,5,2,4,3), (1,3,5,2,4), (1,5,3,4,2), (1,4,5), (1,3)(2,4) ]
gap> last = gList;
true
]]></Example>

The package author has implemented the methods
<Ref BookName="Reference" Func="ListWreathProductElement"/> and
<Ref BookName="Reference" Func="WreathProductElementList"/>
in &GAP; in order to translate between list representations
of wreath product elements and other representations.
The naming conventions are the same as for <C>ListPerm</C> and <C>PermList</C>. <P/>
Moreover, all functions that work for <C>IsWreathProductElement</C>
can also be used on these list representations.
However, it is not checked if the list indeed represents a wreath product element. <P/>
<Example><![CDATA[
gap> IsWreathCycle(gList);
false
]]></Example>

If the wreath product element is "sparse",
i.e. has only a few non-trivial components,
it might be easier to create it by embedding its non-trivial components
into <M>G</M> directly and taking the product.
Note however, that <C>WreathProductElementList</C> might be faster. <P/>
<Example><![CDATA[
gap> h := (1,2,3)^Embedding(G,2) * (1,5,2,4,3)^Embedding(G,4) * (1,2,4)^Embedding(G, 5);
(1,6,17,4,9,19,3,8,16,5,10,20,2,7,18)
gap> hList := ListWreathProductElement(G, h);
[ (), (1,2,3), (), (1,5,2,4,3), (1,2,4) ]
gap> IsWreathCycle(hList);
true
]]></Example>

</Section>

<Section Label="Tutorial Display Wreath Product Elements">
<Heading>Display Wreath Product Elements</Heading>
In this section we present an example session which demonstrates
how we can display wreath products elements in an intuitive way.

Wreath product elements are viewed, printed and displayed (see
section <Ref BookName="Reference" Sect="View and Print"/> for the distinctions between these
operations) as extended tuple representations (see section <Ref Sect="Intro Notation"/>). <P/>

Suppose we are given some element <M>g</M> in the wreath product
<M>G = \textrm{Alt}(5) \wr \textrm{Sym}(4)</M>,
and would like to view its components in a nice way. <P/>
<Example><![CDATA[
gap> LoadPackage("WPE");;
gap> K := AlternatingGroup(5);;
gap> H := SymmetricGroup(4);;
gap> G := WreathProduct(K, H);;
gap> iso := IsomorphismToGenericWreathProduct(G);;
gap> W := Image(iso);;
gap> g := (1,15,8,20)(2,14,7,19,5,12,6,18,3,11,10,17)(4,13,9,16);;
gap> g in G;
true
]]></Example>

First we translate the element <M>g</M> into a generic wreath product element <M>w</M>.
&GAP; uses <C>ViewObj</C> to print <M>w</M> in a compressed form. <P/>
<Example><![CDATA[
gap> w := g ^ iso;
< wreath product element with 4 base components >
]]></Example>

If we want to print this element in a "machine-readable" way,
we could use one of the following methods. <P/>
<Example><![CDATA[
gap> Print(w);
( (1,5,2,4,3), (1,3,5,2,4), (1,5,3,4,2), (1,4,5); (1,3,2,4) )
gap> L := ListWreathProductElement(W, w);
[ (1,5,2,4,3), (1,3,5,2,4), (1,5,3,4,2), (1,4,5), (1,3,2,4) ]
gap> L = ListWreathProductElement(G, g);
true
]]></Example>

Usually, we want to display this element in a nice format instead,
which is "human-readable" and allows us to quickly distinguish components. <P/>
<Example><![CDATA[
gap> Display(w);
       1            2            3          4        top   
( (1,5,2,4,3), (1,3,5,2,4), (1,5,3,4,2), (1,4,5); (1,3,2,4) )
]]></Example>

There are many display options available for adjusting the display behaviour
for wreath product elements to your liking. (see <Ref Label="Display Functions"/>)
For example, we might want to display the element vertically.
We can do this only once for a single execution of the `Display` command without
changing the default display options like this: <P/>
<Example><![CDATA[
gap> Display(w, rec(horizontal := false));
  1: (1,5,2,4,3)
  2: (1,3,5,2,4)
  3: (1,5,3,4,2)
  4: (1,4,5)
top: (1,3,2,4)
gap> Display(w);
       1            2            3          4        top   
( (1,5,2,4,3), (1,3,5,2,4), (1,5,3,4,2), (1,4,5); (1,3,2,4) )
]]></Example>

We can also change the default display options via the following command.
<Example><![CDATA[
gap> SetDisplayOptionsForWreathProductElements(rec(horizontal := false));
gap> Display(w);
  1: (1,5,2,4,3)
  2: (1,3,5,2,4)
  3: (1,5,3,4,2)
  4: (1,4,5)
top: (1,3,2,4)
]]></Example>

All changes to the default behaviour can be reverted via the following command.
<Example><![CDATA[
gap> ResetDisplayOptionsForWreathProductElements();
gap> Display(w);
       1            2            3          4        top   
( (1,5,2,4,3), (1,3,5,2,4), (1,5,3,4,2), (1,4,5); (1,3,2,4) )
]]></Example>

But sometimes, it is sufficient to just look at some components
of a wreath product element. We can directly use the list representation
to access the components on a Low-Level or we can use High-Level
functions on wreath product elements instead.
<Example><![CDATA[
gap> a := BaseComponentOfWreathProductElement(w, 3);
(1,5,3,4,2)
gap> a = L[3];
true
gap> b := TopComponentOfWreathProductElement(w);
(1,3,2,4)
gap> b = L[5];
true
]]></Example>
<P/>

</Section>

<!-- ############################################################ -->

</Chapter>