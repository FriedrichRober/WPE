<!--
This chapter gives a short introduction and explains the notation
behind the package.
-->

<Chapter Label="Introduction">
<Heading>Introduction</Heading>

<Section Label="Intro Overview">
<Heading>Overview</Heading>

This package is about wreath product elements in their general representation.
This representation is more intuitive to the User when working with wreath products
and additionally may have computational benefits over other representations. <P/>

[TODO:: Add references]

</Section>

<Section Label="Intro Notation">
<Heading>Notation</Heading>

Let <M>G = K \wr H</M> be a wreath product,
where <M>H</M> is a permutation group of degree <M>m</M>.
The wreath product is defined as the semidirect product
of the function space <M>K^m</M> with <M>H</M>,
where <M>\sigma \in H</M> acts on <M>f \in K^m</M>
by setting <M>f^{\sigma} : \{1, \ldots, m\} \rightarrow K, i \mapsto [(i)\sigma^{{-1}}]f</M>. <P/>

Formally we can write elements of <M>G</M> as a tupel <M>g = (f, \sigma) \in G</M>,
where <M>f \in K^m </M> is a function <M>f : \{1, \ldots, m\} \rightarrow K </M>
and <M>\sigma \in H \leq Sym(m)</M> is a permutation on <M>m</M> points.
We call <M>f</M> the <E>base component</E> and <M>\sigma</M> the <E>top component</E> of <M>g</M>. <P/>

We can naturally identify a map <M>f \in K^m</M> with a tupel <M>(g_1, \ldots, g_m)</M>,
where each <M>g_i \in K</M> is the image of <M>i \in \{1, \ldots, m\}</M> under <M>f</M>.
This yields a second useful notation for elements in <M>G</M> by writing
<M>g = (g_1, \ldots, g_m; \sigma)</M>.
Note that we use a semicolon to seperate the base component from the top component.
Further we call the element <M>g_i</M> the <E><M>i</M>-th base component</E> of <M>g</M>.

</Section>

<Section Label="Caged">
<Heading>Caged Cycle Decomposition</Heading>

In a permutation group we have the well-known concept of a cycle decomposition.
For wreath products we have a similar concept called <E>caged cycle decomposition</E>
that allows us to solve certain computational tasks more efficiently. <P/>

First we introduce the concept of the territory.
We define the <E>territory</E> of an element <M>g = (g_1, \ldots, g_m; \sigma) \in G</M>
by <M>terr(g) := supp(\sigma) \cup \{i : g_i \neq 1\}</M>. <P/>

An element <M>g = (g_1, \ldots, g_m; \sigma) \in G</M> is called a <E>caged cycle</E> if
either <M>\sigma</M> is a cycle and <M>g_i = 1</M> for all <M>i \in fix(\sigma)</M>
or <M>|terr(g)| = 1</M>. <P/>

The idea is to write an arbitrary element of the wreath product <M>G = K \wr H</M>
as a product of disjoint caged cycles as follows: <P/>

Decompose <M>\sigma</M> into cycles, say <M>\sigma = c_1 ... c_l</M>.
For a set <M>I \leq \{1, \ldots, m\}</M> we define <M>f_I</M>
as an element of <M>K^m</M> by setting
<List>
    <Item> <M>[i]f_I := g_i</M>, if <M>i \in I</M> </Item>
    <Item> <M>[i]f_I := 1_K</M>, else </Item>
</List>
For each cycle <M>c_r</M> we define <M>top_r := (f_{{supp(c_r)}}, c_r)</M>.
For each point <M>i</M> such that <M>i \not \in supp(\sigma)</M> and <M>g_i \neq 1_K</M>
we define <M>base_i := f_i</M>.
Then <M>g</M> can be written as a product of the <M>top_r</M> and <M>base_i</M> elements
and each such element is a caged cycle with pairwise disjoint territory.
Thus in particular these elements commute pairwise. <P/>

Further we say that a caged cycle <M>g = (g_1, \ldots, g_m; \sigma) \in G</M> is a <E>normal cycle</E>,
if <M>g_i \neq 1</M> for all <M>i \neq max(terr(g))</M>. <P/>

Suppose for an arbitrary element <M>g = (g_1, \ldots, g_m; \sigma) \in G</M> we have
a caged cycle decomposition into cycles <M>c_1, \ldots, c_l \in G</M>.
There exist <M>n_1, \ldots, n_l \in G</M> such that <M>c_k^{{n_k}}</M> is a normal cycle for all <M>k</M>.
Moreover the product of the normal cycles is the same as <M>g^{{n_1 \cdots n_l}}</M>
and the elements <M>n_k</M> commute pairwise.
We call the conjugated cycles in normal form the <E>normal cycle decomposition</E> of <M>g</M>.
Note that the product of those normal cycles only yields a conjugated element of <M>g</M>.
</Section>

<Section Label="Intro Example">
<Heading>Example</Heading>

In this section we present an example session.
<P/>
<Example><![CDATA[
gap> LoadPackage("WreathProductElements");;
# Construct an imprimitive wreath product
# that is embedded into a symmetric group.
# This is the GAP intern wreath product command.
gap> K := AlternatingGroup(5);;
gap> H := SymmetricGroup(7);;
gap> G := WreathProduct(K, H);
<permutation group of size 14108774400000000 with 4 generators>
# Construct an isomorphism to the generic wreath product
# that is provided in this package.
gap> iso := IsomorphismToGenericWreathProduct(G);;
gap> W := Image(iso);
<group of size 14108774400000000 with 4 generators>
# Let us compare how GAP displays elements in G and W respectively
# Elements in G are represented as permutations.
# In this representation it is completely unclear
# how the base and top components of this element look like.
gap> g := (1,23,33,27,9,13,2,25,34,28,8,14,3,24,35,30,10,12,5,21,32,29,6,11,
> 4,22,31,26,7,15)(18,19,20);;
gap> g in G;
true
# Elements in W are represented as generic wreath product elements
# that makes it easy to read off the base and top component of the element.
gap> x := g^iso;
WreathProductElement((1,3,4,2,5),(2,5)(3,4),(1,4,3,2,5),(3,4,5),(1,2)(4,5),
                     (1,2,4),(2,4,3);(1,5,7,6,2,3))
# We can display each component easily with the provided commands.
gap> Base(x, 2);
(2,5)(3,4)
gap> Top(x);
(1,5,7,6,2,3)
# Let us decompose the element into disjoint caged cycles.
gap> cagedDecomp := CagedCycleDecomposition(x);
[ WreathProductElement((),(),(),(3,4,5),(),(),();()),
  WreathProductElement((1,3,4,2,5),(2,5)(3,4),(1,4,3,2,5),(),(1,2)(4,5),
                       (1,2,4),(2,4,3);(1,5,7,6,2,3)) ]
# Now we want to bring these cycles in normal form.
# Each such cycle is a very restricted element,
# since at most one entry in the base component is non-trivial.
gap> normalDecomp := NormalCycleDecomposition(x);
[ WreathProductElement((),(),(),(3,4,5),(),(),();()),
  WreathProductElement((),(),(),(),(),(),(1,2,3,5,4);(1,5,7,6,2,3)) ]
# We can also compute the conjugating elements to switch between
# the caged and normal decomposition.
gap> conj := ConjugatorCagedToNormal(x);
[ WreathProductElement((),(),(),(),(),(),();()),
  WreathProductElement((),(1,4,2),(1,4,3,2,5),(),(1,5,2,4,3),(),(1,4,2,5,3);()) ]
gap> cagedDecomp[1]^conj[1] = normalDecomp[1];
true
gap> cagedDecomp[2]^conj[2] = normalDecomp[2];
true
]]></Example>
<P/>

</Section>


<Section Label="Basic Functions">
<Heading>Basic Functions</Heading>

<#Include Label="Top">
<#Include Label="Base">

<#Include Label="Territory">
<#Include Label="IsCagedCycle">
<#Include Label="IsNormalCycle">
<#Include Label="CagedCycleDecomposition">
<#Include Label="NormalCycleDecomposition">
<#Include Label="ConjugatorCagedToNormal">


</Section>

<!-- ############################################################ -->

</Chapter>