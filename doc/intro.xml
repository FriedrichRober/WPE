<Chapter Label="Intro">
<Heading>Introduction</Heading>

This chapter serves as an introduction and explains the notation
of the package &WPE;.

<Section Label="Intro Overview">
<Heading>Overview</Heading>

The package &WPE; is about wreath product elements in their generic representation.
This representation is more intuitive to the User when working with wreath products
and additionally may have computational benefits over other representations. <P/>

In particular this package provides efficient methods for finding conjugating elements, conjugacy classes, and centralisers.
The implementations are based on <Cite Key="wpeConjugacy"/> and references therein.
For a complete list of operations that exploit the generic representation, see Chapter <Ref Chap="Operations"/>. <P/>

For example, the computation of all <M>886\,640</M> conjugacy classses of the wreath product <M>W = \textrm{M}_{22} \wr \textrm{A}_9</M>
takes about 12 seconds with &WPE;. With native &GAP; this computation is not feasible. <P/>
<Example><![CDATA[
gap> LoadPackage("WPE");
gap> K := MathieuGroup(22);;
gap> H := AlternatingGroup(9);;
gap> G := WreathProduct(K, H);;
gap> C := ConjugacyClasses(G);;
gap> Size(C);
886640
]]></Example>
</Section>

<Section Label="Intro Notation">
<Heading>Notation</Heading>

Let <M>G = K \wr H</M> be a wreath product,
where <M>H</M> is a permutation group of degree <M>m</M>.
The wreath product is defined as the semidirect product
of the function space <M>K^m</M> with <M>H</M>,
where <M>\pi \in H</M> acts on <M>f \in K^m</M>
by setting <M>f^{{\pi}} : \{1, \ldots, m\} \rightarrow K, i \mapsto [(i)\pi^{{-1}}]f</M>.
We denote the parent wreath product by <M>P = K \wr \textrm{Sym}(m) \geq G</M>. <P/>

Formally we can write an element of <M>G</M> as a tuple <M>g = (f, \pi) \in G</M>,
where <M>f \in K^m </M> is a function <M>f : \{1, \ldots, m\} \rightarrow K </M>
and <M>\pi \in H \leq \textrm{Sym}(m)</M> is a permutation on <M>m</M> points.
We call <M>f</M> the <E>base component</E> and <M>\pi</M> the <E>top component</E> of <M>g</M>. <P/>

We can naturally identify a map <M>f \in K^m</M> with a tuple <M>(g_1, \ldots, g_m)</M>,
where each <M>g_i \in K</M> is the image of <M>i \in \{1, \ldots, m\}</M> under <M>f</M>.
This yields a second useful notation for elements in <M>G</M> by writing
<M>g = (g_1, \ldots, g_m; \pi)</M>.
Note that we use a semicolon to seperate the base component from the top component.
Further we call the element <M>g_i</M> the <E><M>i</M>-th base component</E> of <M>g</M>. <P/>

Analogous, the subgroup <M>B = K^m \times \langle 1_H \rangle \leq G</M> is called the <E>base group</E> of <M>G</M>
and the subgroup <M>T = \langle 1_K \rangle^m \times H \leq G</M> is called the <E>top group</E> of <M>G</M>.
</Section>

<Section Label="Wreath Cycle">
<Heading>Wreath Cycle Decomposition</Heading>

In a permutation group we have the well-known concept of a cycle decomposition.
For wreath products we have a similar concept called <E>wreath cycle decomposition</E>
that allows us to solve certain computational tasks more efficiently. <P/>

Detailed information on <E>wreath cycle decompositions</E> can be found in Chapter 2 in <Cite Key="wpeConjugacy"/>.
Chapters 3-5 in <Cite Key="wpeConjugacy"/> describe how these can be exploited
for finding conjugating elements, conjugacy classes, and centralisers,
and Chapter 6 in <Cite Key="wpeConjugacy"/> contains a table of timings of sample computations done with &WPE; vs. native &GAP;. <P/>

We use the notation from <Ref Sect="Intro Notation"/> in order to introduce the following concepts. <P/>

<M>\bf\text{Definition:}</M> We define the <E>territory</E> of an element <M>g = (g_1, \ldots, g_m; \pi) \in G</M>
by <M>\textrm{terr}(g) := \textrm{supp}(\pi) \cup \{i : g_i \neq 1\}</M>,
where <M>\textrm{supp}(\pi)</M> denotes the set of moved points of <M>\pi</M>. <P/>

<M>\bf\text{Definition:}</M> Two elements <M>g, h \in G</M> are said to be <E>disjoint</E> if their territories are disjoint. <P/>

<M>\bf\text{Lemma:}</M> Disjoint elements in <M>G</M> commute. <P/>

<M>\bf\text{Definition:}</M> An element <M>g = (g_1, \ldots, g_m; \pi) \in G</M> is called a <E>wreath cycle</E> if
either <M>\pi</M> is a cycle and <M>\textrm{terr}(g) = \textrm{supp}(\pi)</M>,
or <M>|\textrm{terr}(g)| = 1</M>.<P/>

<M>\bf\text{Example:}</M> For example if we consider the wreath product <M> \textrm{Sym}(4) \wr \textrm{Sym}(5) </M>, the element
<Display Mode="M">
{\bf(} \;\; (),\, (1,2,3),\, (),\, (1,2),\, ();\, (1,2,4) \;\; {\bf)}
</Display>
is a wreath cycle as described in the first case and the element
<Display Mode="M">
{\bf(} \; (),\, (),\, (1,3),\, (),\, ();\, () \;\; {\bf)}
</Display>
is a wreath cycle as described in the second case. Moreover, these elements are disjoint and thus commute.<P/>

<M>\bf\text{Theorem:}</M> Every element of <M>G</M> can be written as a finite product
of disjoint wreath cycles in <M>P</M>.
This decomposition is unique up to ordering of the factors.
We call such a decomposition a <E>wreath cycle decomposition</E>. <P/>

</Section>

<Section Label="Sparse Wreath Cycle">
<Heading>Sparse Wreath Cycle</Heading>

We use the notation from <Ref Sect="Intro Notation"/> in order to introduce the following concepts. <P/>

The main motivation for introducing the concept of <E>sparse wreath cycles</E>
is the efficient computation of centralisers of wreath product elements.
Simply put, we compute the centraliser of an arbitrary element <M>g \in P</M> in <M>G</M>
by conjugating it to a restricted representative <M>h = g^c \in P</M>
and computing the centraliser of <M>h</M> in <M>G</M>.
The wreath cycle decomposition of the representative <M>h</M>
consists only of sparse wreath cycles.<P/>

More information on <E>sparse wreath cycles</E> and centralisers of wreath product elements
can be found in Chapter 5 in <Cite Key="wpeConjugacy"/>.<P/>

<M>\bf\text{Definition:}</M> We say that a wreath cycle <M>g = (g_1, \ldots, g_m; \pi) \in G</M> is a <E>sparse wreath cycle</E>,
if there exists an <M>i_0</M> such that <M>g_i = 1</M> for all <M>i \neq i_0</M>.<P/>

<M>\bf\text{Example:}</M> For example if we consider the wreath product <M> \textrm{Sym}(4) \wr \textrm{Sym}(5) </M>, the element
<Display Mode="M">
{\bf(} \;\; (),\, (1,2,3),\, (),\, (),\, ();\, (1,2,4) \;\; {\bf)}
</Display>
is a sparse wreath cycle, as well as the element
<Display Mode="M">
{\bf(} \;\; (),\, (),\, (1,3),\, (),\, ();\, () \;\; {\bf)} \;.
</Display><P/>

<M>\bf\text{Theorem:}</M> Every element <M>g \in P</M> can be conjugated by some <M>c \in K^m \times \langle 1_H \rangle \leq P</M> to an element <M>h = g^c \in P</M>
such that the wreath cycle decomposition of <M>h</M>
consists only of sparse wreath cycles.

</Section>

<Section Label="Intro Example">
<Heading>Example</Heading>

In this section we present an example session which demonstrates
how we can access the generic representation of a wreath product. <P/>

First we construct the wreath product <M>G = \textrm{Alt}(5) \wr \textrm{Sym}(7)</M>.
For this we use the native &GAP; command <C>WreathProduct</C> (see <Ref BookName="Reference" Sect="Wreath Products"/>).
The resulting group is embedded into a symmetric group on <M>5 \cdot 7 = 35</M> points
via the imprimitive action of the wreath product.
The size of the group is
<Display Mode="M">
\vert G \vert = \vert\textrm{Alt}(5)\vert^7 \cdot \vert\textrm{Sym}(7)\vert = 60^7 \cdot 5\,040 = 14\,108\,774\,400\,000\,000\;.
</Display><P/>
<Example><![CDATA[
gap> K := AlternatingGroup(5);;
gap> H := SymmetricGroup(7);;
gap> G := WreathProduct(K, H);
<permutation group of size 14108774400000000 with 4 generators>
]]></Example>

Now we construct an isomorphism to a wreath product given in generic representation
that is provided in &WPE;. For this, we need to load the package.<P/>
<Example><![CDATA[
gap> LoadPackage("WPE");;
gap> iso := IsomorphismToGenericWreathProduct(G);;
gap> W := Image(iso);
<group of size 14108774400000000 with 4 generators>
]]></Example>

Let us compare how &GAP; displays elements in <M>G</M> and <M>W</M> respectively.
Elements in <M>G</M> are represented as permutations.
In this representation it is hard to see
how the base and top components of this element look like. <P/>
<Example><![CDATA[
gap> g := (1,13,3,14,4,12,2,15,5,11)(6,31,21,7,35,25,9,33,23,8,34,24,10,32,22)(18,19,20);;
gap> g in G;
true
]]></Example>

Elements in <M>W</M> however are represented as generic wreath product elements. (see <Ref Sect="Intro Notation"/>)
This allows us to easily read off the base and top component of the element
by either printing or displaying the element.
Otherwise, by default the element is viewed in compressed form. (see <Ref Sect="Display Functions"/>)
This printing behaviour is similar to matrices in &GAP;. <P/>
<Example><![CDATA[
gap> x := g ^ iso;
< wreath product element with 7 base components >
gap> Print(x);
( (1,3,4,2,5), (2,5)(3,4), (), (3,4,5), (1,2)(4,5), (), (); (1,3)(2,7,5) )
gap> Display(x);
       1           2       3      4         5       6   7       top     
( (1,3,4,2,5), (2,5)(3,4), (), (3,4,5), (1,2)(4,5), (), (); (1,3)(2,7,5) )
]]></Example>

Furthermore, we can display each component easily with the provided commands. <P/>
<Example><![CDATA[
gap> BaseComponentOfWreathProductElement(x, 2);
(2,5)(3,4)
gap> TopComponentOfWreathProductElement(x);
(1,3)(2,7,5)
]]></Example>

Next, we compute the territory of <M>x</M>,
i.e. the analogue of the support of a permutation. <P/>
<Example><![CDATA[
gap> Territory(x);
[ 1, 2, 3, 4, 5, 7 ]
]]></Example>

Finally, let us compute the disjoint wreath cycle decomposition of <M>x</M>,
i.e. the analogue of the disjoint cycle decomposition of a permutation. <P/>
<Example><![CDATA[
gap> wreathDecomp := WreathCycleDecomposition(x);;
gap> Print(wreathDecomp);
[ ( (), (), (), (3,4,5), (), (), (); () ), 
  ( (1,3,4,2,5), (), (), (), (), (), (); (1,3) ), 
  ( (), (2,5)(3,4), (), (), (1,2)(4,5), (), (); (2,7,5) ) ]
]]></Example>
<P/>

</Section>

<!-- ############################################################ -->

</Chapter>