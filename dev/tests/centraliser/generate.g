Generate := function(K, H, id, n)
    local G, file, stream, i, g, Cgens;
    G := WreathProduct(K, H);
    file := Concatenation("out/testCentraliser_", id, ".tst");
    stream:=OutputTextFile(file, false);
    SetPrintFormattingStatus(stream, false);
    PrintTo(stream);
    AppendTo(stream, "gap> # Generated by dev/tests/centraliser/generate.g\n");
    AppendTo(stream, "gap> ReadPackage(\"WreathProductElements\",\"tst/testCentraliser.g\");;\n");
    AppendTo(stream, "gap> K := Group(", GeneratorsOfGroup(K), ");;\n");
    AppendTo(stream, "gap> H := Group(", GeneratorsOfGroup(H), ");;\n");
    AppendTo(stream, "gap> G := WreathProduct(K, H);;\n");
    for i in [1 .. n] do
        g := PseudoRandom(G);
        Cgens := GeneratorsOfGroup(Centraliser(G, g));
        AppendTo(stream, "gap> # Element ", i, "\n");
        AppendTo(stream, "gap> g := ", g, ";;\n");
        AppendTo(stream, "gap> Cgens := ", Cgens, ";;\n");
        AppendTo(stream, "gap> TestCentraliser(G, g, Cgens);\n");
        AppendTo(stream, "true\n");
    od;
end;

K := SymmetricGroup(4);
H := SymmetricGroup(8);
id := "S4wrS8";
Generate(K, H, id, 20);

K := SymmetricGroup(4);
H := AlternatingGroup(8);
id := "S4wrA8";
Generate(K, H, id, 20);

K := SymmetricGroup(4);
H := DihedralGroup(IsPermGroup, 16);
id := "S4wrD16";
Generate(K, H, id, 20);
